// bin/textify-cli.js
#!/usr/bin/env node
import { main } from "../lib/textify.js";
main().catch(console.error);


// jest.config.js
// jest.config.mjs
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  transform: {
    "^.+\\.ts$": "ts-jest",
  },
  transformIgnorePatterns: ["/node_modules/"],
  extensionsToTreatAsEsm: [".ts"],
};


// lib/textify.d.ts
#!/usr/bin/env ts-node
export declare class Textify {
    private config;
    private gitignore;
    private outputDir;
    private outputFileBase;
    constructor();
    private loadConfig;
    private loadGitignore;
    private getFilesCount;
    private countFilesInDir;
    private shouldSkip;
    private isValidFile;
    private getNextOutputFileName;
    private processFiles;
    private processDir;
    run(): Promise<void>;
}
export declare function main(): Promise<void>;


// lib/textify.js
#!/usr/bin/env ts-node
import * as fs from "fs";
import * as path from "path";
import ignore from "ignore";
import * as readline from "readline";
const defaultConfig = {
    includeExtensions: [".ts", ".tsx", ".js", ".jsx", ".json"],
    excludeExtensions: [".log", ".md"],
    includeDirs: ["."],
    excludeDirs: ["textify", "node_modules", ".git", "dist", "build"],
    maxFilesWarning: 50,
};
export class Textify {
    config = defaultConfig;
    gitignore;
    outputDir = path.join(process.cwd(), "textify");
    outputFileBase = "output.txt";
    constructor() {
        this.loadConfig();
        this.loadGitignore();
    }
    loadConfig() {
        const configPath = path.join(process.cwd(), "textify.config.json");
        try {
            const configData = fs.readFileSync(configPath, "utf-8");
            this.config = { ...defaultConfig, ...JSON.parse(configData) };
        }
        catch {
            console.log("Config file not found, using defaults");
        }
    }
    loadGitignore() {
        const gitignorePath = path.join(process.cwd(), ".gitignore");
        this.gitignore = ignore();
        try {
            const gitignoreContent = fs.readFileSync(gitignorePath, "utf-8");
            this.gitignore.add(gitignoreContent);
        }
        catch {
            console.log("No .gitignore found, proceeding with config only");
        }
    }
    async getFilesCount() {
        let count = 0;
        for (const dir of this.config.includeDirs) {
            const fullPath = path.resolve(process.cwd(), dir);
            if (!fs.existsSync(fullPath))
                continue;
            count += await this.countFilesInDir(fullPath);
        }
        return count;
    }
    async countFilesInDir(dir) {
        let count = 0;
        const files = await fs.promises.readdir(dir, { withFileTypes: true });
        for (const file of files) {
            const fullPath = path.join(dir, file.name);
            if (this.shouldSkip(fullPath))
                continue;
            if (file.isDirectory()) {
                count += await this.countFilesInDir(fullPath);
            }
            else if (this.isValidFile(fullPath)) {
                count++;
            }
        }
        return count;
    }
    shouldSkip(filePath) {
        const relativePath = path.relative(process.cwd(), filePath);
        if (this.gitignore?.ignores(relativePath))
            return true;
        const ext = path.extname(filePath);
        if (this.config.excludeExtensions.includes(ext))
            return true;
        if (!this.config.includeExtensions.includes(ext) &&
            !fs.statSync(filePath).isDirectory())
            return true;
        const fullPath = path.resolve(process.cwd(), filePath);
        // Сначала проверяем исключения из excludeDirs
        const isExcluded = this.config.excludeDirs.some((excludeDir) => {
            const excludePath = path.resolve(process.cwd(), excludeDir);
            return (fullPath === excludePath || fullPath.startsWith(excludePath + path.sep));
        });
        if (isExcluded)
            return true;
        // Проверяем, входит ли путь в includeDirs
        const isIncluded = this.config.includeDirs.some((includeDir) => {
            const includePath = path.resolve(process.cwd(), includeDir);
            return (fullPath.startsWith(includePath + path.sep) || fullPath === includePath);
        });
        // Если путь не входит в includeDirs, пропускаем его
        return !isIncluded;
    }
    isValidFile(filePath) {
        const ext = path.extname(filePath);
        return (this.config.includeExtensions.includes(ext) &&
            !this.config.excludeExtensions.includes(ext));
    }
    getNextOutputFileName() {
        let counter = 0;
        let fileName = this.outputFileBase;
        while (fs.existsSync(path.join(this.outputDir, fileName))) {
            counter++;
            fileName = `${path.basename(this.outputFileBase, ".txt")}.${counter.toString().padStart(3, "0")}.txt`;
        }
        return fileName;
    }
    async processFiles(outputStream) {
        console.log("Collecting files:");
        for (const dir of this.config.includeDirs) {
            const fullPath = path.resolve(process.cwd(), dir);
            if (!fs.existsSync(fullPath)) {
                console.log(`Directory ${dir} does not exist, skipping`);
                continue;
            }
            const relativeDir = path.relative(process.cwd(), fullPath) || ".";
            console.log(`${relativeDir}/`);
            await this.processDir(fullPath, outputStream, 1);
        }
    }
    async processDir(dir, outputStream, depth) {
        const files = await fs.promises.readdir(dir, { withFileTypes: true });
        for (const file of files) {
            const fullPath = path.join(dir, file.name);
            if (this.shouldSkip(fullPath))
                continue;
            const relativePath = path.relative(process.cwd(), fullPath);
            const indent = "  ".repeat(depth);
            if (file.isDirectory()) {
                console.log(`${indent}${file.name}/`);
                await this.processDir(fullPath, outputStream, depth + 1);
            }
            else if (this.isValidFile(fullPath)) {
                console.log(`${indent}${file.name}`);
                const content = await fs.promises.readFile(fullPath, "utf-8");
                outputStream.write(`// ${relativePath}\n${content}\n\n`);
            }
        }
    }
    async run() {
        const totalFiles = await this.getFilesCount();
        if (totalFiles > this.config.maxFilesWarning) {
            console.log(`Warning: Found ${totalFiles} files exceeding limit of ${this.config.maxFilesWarning}`);
            const rl = readline.createInterface({
                input: process.stdin,
                output: process.stdout,
            });
            const answer = await new Promise((resolve) => rl.question("Continue? (y/n): ", resolve));
            rl.close();
            if (answer.toLowerCase() !== "y") {
                console.log("Aborted by user");
                return;
            }
        }
        if (!fs.existsSync(this.outputDir)) {
            fs.mkdirSync(this.outputDir);
        }
        const outputFile = path.join(this.outputDir, this.getNextOutputFileName());
        const outputStream = fs.createWriteStream(outputFile);
        await this.processFiles(outputStream);
        outputStream.end();
        console.log(`Output written to ${outputFile}`);
    }
}
export async function main() {
    const textify = new Textify();
    await textify.run();
}
main().catch(console.error);


// package.json
{
  "name": "textify-cli",
  "version": "1.0.0",
  "description": "CLI utility to concatenate project source files into a single text file",
  "main": "lib/textify.js",
  "bin": {
    "textify-cli": "./bin/textify-cli.js"
  },
  "types": "lib/textify.d.ts",
  "type": "module",
  "scripts": {
    "build": "tsc",
    "prepublishOnly": "npm run build",
    "test": "jest",
    "textify-cli": "ts-node src/textify.ts"
  },
  "keywords": [
    "file-concatenation",
    "source-code",
    "utility",
    "cli"
  ],
  "author": "Your Name <your.email@example.com>",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/username/textify-cli.git"
  },
  "bugs": {
    "url": "https://github.com/username/textify-cli/issues"
  },
  "homepage": "https://github.com/username/textify-cli#readme",
  "devDependencies": {
    "@types/jest": "^29.5.14",
    "@types/node": "^22.13.5",
    "ignore": "^7.0.3",
    "jest": "^29.7.0",
    "ts-jest": "^29.2.6",
    "ts-node": "^10.9.2",
    "typescript": "^5.7.3"
  },
  "dependencies": {}
}


// src/textify.test.ts
import * as fs from "fs";
import * as path from "path";
import { Textify } from "./textify";

jest.mock("fs", () => ({
  ...jest.requireActual("fs"),
  existsSync: jest.fn(),
  mkdirSync: jest.fn(),
  readFileSync: jest.fn(),
  statSync: jest.fn(), // Добавляем мок для statSync
  promises: {
    readdir: jest.fn(),
    readFile: jest.fn(),
  },
}));

describe("Textify", () => {
  let textify: Textify;
  let mockReaddir: jest.Mock;
  let mockReadFile: jest.Mock;
  let mockExistsSync: jest.Mock;
  let mockStatSync: jest.Mock;

  beforeEach(() => {
    textify = new Textify();
    mockReaddir = fs.promises.readdir as jest.Mock;
    mockReadFile = fs.promises.readFile as jest.Mock;
    mockExistsSync = fs.existsSync as jest.Mock;
    mockStatSync = fs.statSync as jest.Mock;
    (fs.readFileSync as jest.Mock).mockImplementation(() => {
      throw new Error("File not found");
    }); // Мок для config и gitignore
    jest.clearAllMocks();
  });

  test("loads default config when no config file exists", () => {
    expect(textify["config"]).toEqual({
      includeExtensions: [".ts", ".tsx", ".js", ".jsx", ".json"],
      excludeExtensions: [".log", ".md"],
      includeDirs: ["."],
      excludeDirs: ["textify", "node_modules", ".git", "dist", "build"],
      maxFilesWarning: 50,
    });
  });

  test("shouldSkip returns true for excluded extensions", () => {
    expect(textify["shouldSkip"]("test.log")).toBe(true);
    expect(textify["shouldSkip"]("test.md")).toBe(true);
  });

  test("shouldSkip returns false for included extensions", () => {
    mockStatSync.mockReturnValue({
      isDirectory: () => false,
      isFile: () => true,
    });
    expect(textify["shouldSkip"]("test.ts")).toBe(false);
    expect(textify["shouldSkip"]("test.tsx")).toBe(false);
  });

  test("shouldSkip returns true for gitignore", () => {
    textify["gitignore"] = { ignores: jest.fn().mockReturnValue(true) };
    expect(textify["shouldSkip"]("ignored/file.ts")).toBe(true);
  });

  test("shouldSkip returns true for excludeDirs", () => {
    textify["config"] = {
      ...textify["config"],
      includeDirs: ["src"],
      excludeDirs: ["src/api", "node_modules"],
    };
    mockStatSync.mockReturnValue({ isDirectory: () => true });
    expect(textify["shouldSkip"](path.resolve("src/api/test.ts"))).toBe(true);
    expect(textify["shouldSkip"](path.resolve("node_modules/test.ts"))).toBe(
      true,
    );
  });

  test("shouldSkip returns false for nested files within includeDirs", () => {
    textify["config"] = {
      ...textify["config"],
      includeDirs: ["src"],
      excludeDirs: ["src/api", "node_modules"],
    };
    mockStatSync.mockReturnValue({
      isDirectory: () => false,
      isFile: () => true,
    });
    expect(textify["shouldSkip"](path.resolve("src/utils/test.ts"))).toBe(
      false,
    );
  });

  test("getNextOutputFileName increments filename when file exists", () => {
    (fs.existsSync as jest.Mock)
      .mockReturnValueOnce(true)
      .mockReturnValueOnce(true)
      .mockReturnValueOnce(false);

    const result = textify["getNextOutputFileName"]();
    expect(result).toBe("output.002.txt");
  });

  test("isValidFile validates file extensions correctly", () => {
    expect(textify["isValidFile"]("test.ts")).toBe(true);
    expect(textify["isValidFile"]("test.log")).toBe(false);
    expect(textify["isValidFile"]("test.xyz")).toBe(false);
  });

  test("processFiles and processDir outputs correct structure with spaces", () => {
    const mockOutputStream = {
      write: jest.fn(),
      end: jest.fn(),
    };
    const consoleLogSpy = jest.spyOn(console, "log").mockImplementation();

    // Имитация существования директории src
    mockExistsSync.mockReturnValue(true);

    // Настройка mockStatSync для разных путей
    mockStatSync.mockImplementation((filePath: string) => {
      const relativePath = path.relative(process.cwd(), filePath);
      if (
        relativePath === "src" ||
        relativePath.startsWith("src/utils") ||
        relativePath.startsWith("src/api")
      ) {
        return { isDirectory: () => true, isFile: () => false };
      } else if (
        relativePath === "src/index.ts" ||
        relativePath === "src/utils/helper.ts"
      ) {
        return { isDirectory: () => false, isFile: () => true };
      }
      return { isDirectory: () => false, isFile: () => false };
    });

    // Настройка mockReaddir для src
    mockReaddir.mockImplementation((dirPath: string) => {
      const relativePath = path.relative(process.cwd(), dirPath);
      if (relativePath === "src") {
        return Promise.resolve([
          { name: "index.ts", isDirectory: () => false, isFile: () => true },
          { name: "utils", isDirectory: () => true, isFile: () => false },
          { name: "api", isDirectory: () => true, isFile: () => false },
        ]);
      } else if (relativePath === "src/utils") {
        return Promise.resolve([
          { name: "helper.ts", isDirectory: () => false, isFile: () => true },
        ]);
      } else if (relativePath === "src/api") {
        return Promise.resolve([]); // Пустой массив для api, так как исключено
      }
      return Promise.resolve([]);
    });

    mockReadFile.mockResolvedValue("content");

    textify["config"] = {
      ...textify["config"],
      includeDirs: ["src"],
      excludeDirs: ["src/api", "node_modules"],
    };

    return textify["processFiles"](mockOutputStream as any).then(() => {
      expect(consoleLogSpy).toHaveBeenCalledWith("Collecting files:");
      expect(consoleLogSpy).toHaveBeenCalledWith("src/");
      expect(consoleLogSpy).toHaveBeenCalledWith("  index.ts");
      expect(consoleLogSpy).toHaveBeenCalledWith("  utils/");
      expect(consoleLogSpy).toHaveBeenCalledWith("    helper.ts");
      expect(consoleLogSpy).not.toHaveBeenCalledWith("  api/"); // Исключено
      expect(mockOutputStream.write).toHaveBeenCalledWith(
        "// src/index.ts\ncontent\n\n",
      );
      expect(mockOutputStream.write).toHaveBeenCalledWith(
        "// src/utils/helper.ts\ncontent\n\n",
      );
      expect(mockOutputStream.write).not.toHaveBeenCalledWith(
        expect.stringContaining("src/api"),
      );
    });
  });
});


// src/textify.ts
#!/usr/bin/env ts-node
import * as fs from "fs";
import * as path from "path";
import ignore from "ignore";
import * as readline from "readline";

interface Config {
  includeExtensions: string[];
  excludeExtensions: string[];
  includeDirs: string[];
  excludeDirs: string[];
  maxFilesWarning: number;
}

const defaultConfig: Config = {
  includeExtensions: [".ts", ".tsx", ".js", ".jsx", ".json"],
  excludeExtensions: [".log", ".md"],
  includeDirs: ["."],
  excludeDirs: ["textify", "node_modules", ".git", "dist", "build"],
  maxFilesWarning: 50,
};

export class Textify {
  private config: Config = defaultConfig;
  private gitignore: any;
  private outputDir = path.join(process.cwd(), "textify");
  private outputFileBase = "output.txt";

  constructor() {
    this.loadConfig();
    this.loadGitignore();
  }

  private loadConfig() {
    const configPath = path.join(process.cwd(), "textify.config.json");
    try {
      const configData = fs.readFileSync(configPath, "utf-8");
      this.config = { ...defaultConfig, ...JSON.parse(configData) };
    } catch {
      console.log("Config file not found, using defaults");
    }
  }

  private loadGitignore() {
    const gitignorePath = path.join(process.cwd(), ".gitignore");
    this.gitignore = ignore();
    try {
      const gitignoreContent = fs.readFileSync(gitignorePath, "utf-8");
      this.gitignore.add(gitignoreContent);
    } catch {
      console.log("No .gitignore found, proceeding with config only");
    }
  }

  private async getFilesCount(): Promise<number> {
    let count = 0;
    for (const dir of this.config.includeDirs) {
      const fullPath = path.resolve(process.cwd(), dir);
      if (!fs.existsSync(fullPath)) continue;
      count += await this.countFilesInDir(fullPath);
    }
    return count;
  }

  private async countFilesInDir(dir: string): Promise<number> {
    let count = 0;
    const files = await fs.promises.readdir(dir, { withFileTypes: true });

    for (const file of files) {
      const fullPath = path.join(dir, file.name);
      if (this.shouldSkip(fullPath)) continue;

      if (file.isDirectory()) {
        count += await this.countFilesInDir(fullPath);
      } else if (this.isValidFile(fullPath)) {
        count++;
      }
    }
    return count;
  }

  private shouldSkip(filePath: string): boolean {
    const relativePath = path.relative(process.cwd(), filePath);
    if (this.gitignore?.ignores(relativePath)) return true;

    const ext = path.extname(filePath);
    if (this.config.excludeExtensions.includes(ext)) return true;
    if (
      !this.config.includeExtensions.includes(ext) &&
      !fs.statSync(filePath).isDirectory()
    )
      return true;

    const fullPath = path.resolve(process.cwd(), filePath);

    // Сначала проверяем исключения из excludeDirs
    const isExcluded = this.config.excludeDirs.some((excludeDir) => {
      const excludePath = path.resolve(process.cwd(), excludeDir);
      return (
        fullPath === excludePath || fullPath.startsWith(excludePath + path.sep)
      );
    });
    if (isExcluded) return true;

    // Проверяем, входит ли путь в includeDirs
    const isIncluded = this.config.includeDirs.some((includeDir) => {
      const includePath = path.resolve(process.cwd(), includeDir);
      return (
        fullPath.startsWith(includePath + path.sep) || fullPath === includePath
      );
    });

    // Если путь не входит в includeDirs, пропускаем его
    return !isIncluded;
  }

  private isValidFile(filePath: string): boolean {
    const ext = path.extname(filePath);
    return (
      this.config.includeExtensions.includes(ext) &&
      !this.config.excludeExtensions.includes(ext)
    );
  }

  private getNextOutputFileName(): string {
    let counter = 0;
    let fileName = this.outputFileBase;

    while (fs.existsSync(path.join(this.outputDir, fileName))) {
      counter++;
      fileName = `${path.basename(this.outputFileBase, ".txt")}.${counter.toString().padStart(3, "0")}.txt`;
    }
    return fileName;
  }

  private async processFiles(outputStream: fs.WriteStream) {
    console.log("Collecting files:");
    for (const dir of this.config.includeDirs) {
      const fullPath = path.resolve(process.cwd(), dir);
      if (!fs.existsSync(fullPath)) {
        console.log(`Directory ${dir} does not exist, skipping`);
        continue;
      }
      const relativeDir = path.relative(process.cwd(), fullPath) || ".";
      console.log(`${relativeDir}/`);
      await this.processDir(fullPath, outputStream, 1);
    }
  }

  private async processDir(
    dir: string,
    outputStream: fs.WriteStream,
    depth: number,
  ) {
    const files = await fs.promises.readdir(dir, { withFileTypes: true });

    for (const file of files) {
      const fullPath = path.join(dir, file.name);
      if (this.shouldSkip(fullPath)) continue;

      const relativePath = path.relative(process.cwd(), fullPath);
      const indent = "  ".repeat(depth);

      if (file.isDirectory()) {
        console.log(`${indent}${file.name}/`);
        await this.processDir(fullPath, outputStream, depth + 1);
      } else if (this.isValidFile(fullPath)) {
        console.log(`${indent}${file.name}`);
        const content = await fs.promises.readFile(fullPath, "utf-8");
        outputStream.write(`// ${relativePath}\n${content}\n\n`);
      }
    }
  }

  public async run() {
    const totalFiles = await this.getFilesCount();

    if (totalFiles > this.config.maxFilesWarning) {
      console.log(
        `Warning: Found ${totalFiles} files exceeding limit of ${this.config.maxFilesWarning}`,
      );
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
      });

      const answer = await new Promise<string>((resolve) =>
        rl.question("Continue? (y/n): ", resolve),
      );
      rl.close();

      if (answer.toLowerCase() !== "y") {
        console.log("Aborted by user");
        return;
      }
    }

    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir);
    }

    const outputFile = path.join(this.outputDir, this.getNextOutputFileName());
    const outputStream = fs.createWriteStream(outputFile);

    await this.processFiles(outputStream);
    outputStream.end();
    console.log(`Output written to ${outputFile}`);
  }
}

export async function main() {
  const textify = new Textify();
  await textify.run();
}

main().catch(console.error);


// textify.config.json
{
  "includeExtensions": [".ts", ".tsx", ".js", ".jsx", ".json"],
  "excludeExtensions": [".log", ".md"],
  "includeDirs": ["./"],
  "excludeDirs": ["textify", "node_modules", ".git", "dist", "build"],
  "maxFilesWarning": 100
}


// tsconfig.json
{
    "compilerOptions": {
        "target": "ESNext",
        "module": "ESNext",
        "strict": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true,
        "outDir": "./lib",
        "rootDir": "./src",
        "declaration": true,
        "moduleResolution": "node"
    },
    "include": [
        "lib/**/*",
        "bin/**/*",
        "src/**/*"
    ],
    "exclude": [
        "node_modules",
        "src/**/*.test.ts"
    ]
}


